@use '../util' as *;
// 如果你写 @use '../util'; → 必须用 util.rem(20) 来调用。
// 如果你写 @use '../util' as *; → 直接 rem(20) 就行。



// & 在 Sass 里代表 父选择器（这里就是 .toggle）。
// 所以 &_button = .toggle_button
.toggle{
    border: none;
    margin: 0;
    display: grid;
    // grid-template-columns: repeat(3, 1fr); 如果手机也三等分就太宽了
    grid-template-columns: 1fr rem(60) 1fr;
    grid-template-rows: repeat(2, 1fr);
    gap: rem(4.8) rem(8);
    



    label {
        font-size: rem(14);
        align-self: center;

        &[for="dark"]{
            grid-column: 1 / 2;
            justify-self: end;

        }

        &[for="system"]{
            grid-column: 1 / 4;
            grid-row: 2/3;
            justify-self: center;
            align-self: start;

        }

        &[for="light"]{
            grid-column: 3 / 4;

        }

    }


    &_wrapper {
        position: relative;
        grid-column: 2 / 3;
        grid-row: 1 / 2;
        height: rem(24);

    }


    input[type="radio"] {
        opacity: 0;
        margin: 0 rem(-2) 0 rem(-2);
        height: rem(24);
        width: rem(20);

        &:focus ~ .toggle_button {
            border: 2px solid white;
        }

    }

    &_background{
        position: absolute;
        top: 0;
        width: 100%;
        height: 100%;

        border-radius: rem(12);
        overflow: hidden;
        display: block;
        height: 100%;
        background: linear-gradient(225deg, var(--toggle-bg-end) 0%, var(--toggle-bg-start) 98.02%);

        pointer-events: none;
    }


    &_button {
        position: absolute;
        top: rem(3);
        left: rem(3);
        right: 100%;
        width: rem(18);
        height: rem(18);
        border-radius: 50%;
        background-color: var(--dark-bg);
        transition: all 150ms ease-in-out;

    }

    #light:checked ~ .toggle_button {
        left: calc(100% - 21px);
        right: 3px;
    }

    #system:checked ~ .toggle_button {
        left: 50%;
        right: auto;
        transform: translate(-50%);
    }
}